
from src.ast.elements.instruction.IfElse import IfElse
from src.ast.elements.instruction.Foreach import Foreach
from src.ast.elements.instruction.Return import Return
from src.ast.elements.instruction.Repeat import Repeat
from src.ast.elements.instruction.While import While
from src.ast.elements.instruction.Assignment import Assignment
from src.ast.elements.InstrBlock import InstrBlock
from src.ast.elements.final.ID import ID
from bin.grammar.syntax.luppoloParser import luppoloParser
from bin.grammar.syntax.luppoloVisitor import luppoloVisitor
from src.ast.elements.Program import Program
from src.ast.elements.Function import Function

class AstGenerator(luppoloVisitor):
    '''
    The AstGenerator class is used to generate the AST from the raw tree generated by the ANTLR4 parser.
    It extends the luppoloVisitor class and override the visit methods of the luppoloVisitor class to 
    perform the AST generation.
    '''
    
    def visitProgram(self, ctx: luppoloParser.ProgramContext):
        '''
        This method visits the Program node of the raw tree and generates the AST.
        The method takes the following parameters:
        - ctx: the Program node of the raw tree.
        The method returns the AST.
        '''
        functions = ctx.children[:-1]
        return Program([self.visit(child) for child in functions])
    

    def visitFunction(self, ctx: luppoloParser.FunctionContext):
        return Function(ID(ctx.children[0].getText()), self.visit(ctx.children[2]), self.visit(ctx.children[4]))
    
    def visitParameter_list(self, ctx: luppoloParser.Parameter_listContext):
        return [ID(child.getText()) for child in ctx.children if child.getSymbol().type != luppoloParser.COMMA]
    
    def visitBlock(self, ctx: luppoloParser.BlockContext):
        _,*instructions,_ = ctx.children
        return InstrBlock([self.visit(child) for child in instructions])
    
    def visitInstruction(self, ctx: luppoloParser.InstructionContext):
        print("Instruction Children: ", ctx.children)
        match ctx.children[0].getText():
            case "foreach":
                return Foreach(ID(ctx.children[1].getText()), self.visit(ctx.children[3]), self.visit(ctx.children[4]))
            case "if":
                visitedFalseBlock = self.visit(ctx.children[-1]) if len(ctx.children) == 5  else None
                return IfElse(self.visit(ctx.children[1]), self.visit(ctx.children[2]), visitedFalseBlock)
            case "return":
                return Return(self.visit(ctx.children[1]))
            case "while":
                return While(self.visit(ctx.children[1]), self.visit(ctx.children[2]))
            case "repeat":
                return Repeat(self.visit(ctx.children[1]), self.visit(ctx.children[2]))
            case _:
                return Assignment(ID(ctx.children[0].getText()), self.visit(ctx.children[2]))
    
    def visitExpression(self, ctx: luppoloParser.ExpressionContext):
        print("Expression Children: ", ctx.children)
        return super().visitExpression(ctx)